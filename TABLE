-- Criação das tabelas

CREATE TABLE IF NOT EXISTS clientes(
    cli_id INTEGER PRIMARY KEY AUTOINCREMENT,
    cli_nome VARCHAR(100) NOT NULL,
    cli_cpf VARCHAR(14) NOT NULL UNIQUE,
    cli_email VARCHAR(100) NOT NULL
);

CREATE TABLE IF NOT EXISTS funcionario(
    func_id INTEGER PRIMARY KEY AUTOINCREMENT,
    func_nome VARCHAR(100) NOT NULL,
    func_cpf VARCHAR(14) NOT NULL UNIQUE,
    func_email VARCHAR(100) NOT NULL,
    func_cargo VARCHAR(50) NOT NULL,
    func_salario DECIMAL(10,2) NOT NULL
);

CREATE TABLE IF NOT EXISTS fornecedor(
    forn_id_seq INTEGER PRIMARY KEY AUTOINCREMENT,
    forn_nome_empresa VARCHAR(50) NOT NULL,
    forn_cnpj VARCHAR(18) NOT NULL,
    forn_email VARCHAR(50) NOT NULL,
    forn_contato_nome VARCHAR(50) NOT NULL,
    forn_contato_cargo VARCHAR(30) NOT NULL,
    forn_contato_telefone VARCHAR(14) NOT NULL, -- CORRIGIDO: removido "NOT" sozinho
    forn_contato_email VARCHAR(50) NOT NULL
);

CREATE TABLE IF NOT EXISTS endereco(
    end_id INTEGER PRIMARY KEY AUTOINCREMENT,
    cli_id INTEGER,
    func_id INTEGER,
    forn_id_seq INTEGER,
    end_cep VARCHAR(9) NOT NULL,
    end_logradouro VARCHAR(50) NOT NULL,
    end_numero VARCHAR(5) NOT NULL,
    end_complemento VARCHAR(20),
    end_bairro VARCHAR(30) NOT NULL,
    end_cidade VARCHAR(20) NOT NULL,
    end_estado VARCHAR(2) NOT NULL,
    FOREIGN KEY (cli_id) REFERENCES clientes(cli_id),
    FOREIGN KEY (func_id) REFERENCES funcionario(func_id),
    FOREIGN KEY (forn_id_seq) REFERENCES fornecedor(forn_id_seq)
);

CREATE TABLE IF NOT EXISTS telefone(
    tel_id INTEGER PRIMARY KEY AUTOINCREMENT,
    cli_id INTEGER NOT NULL,
    tel_numero VARCHAR(15) NOT NULL,
    FOREIGN KEY (cli_id) REFERENCES clientes(cli_id)
);

CREATE TABLE IF NOT EXISTS telefone_funcionario(
    tel_id INTEGER PRIMARY KEY AUTOINCREMENT,
    func_id INTEGER NOT NULL,
    tel_numero VARCHAR(15) NOT NULL,
    FOREIGN KEY (func_id) REFERENCES funcionario(func_id)
);

CREATE TABLE IF NOT EXISTS telefone_fornecedor(
    tel_id INTEGER PRIMARY KEY AUTOINCREMENT,
    forn_id INTEGER NOT NULL, -- CORRIGIDO: referência correta
    tel_numero VARCHAR(15) NOT NULL,
    FOREIGN KEY (forn_id) REFERENCES fornecedor(forn_id_seq) -- CORRIGIDO: referência correta
);

CREATE TABLE IF NOT EXISTS produto(
    prod_id_seq INTEGER PRIMARY KEY AUTOINCREMENT,
    forn_id INTEGER,
    prod_nome VARCHAR(50) NOT NULL,
    prod_codigo_barra VARCHAR(20) NOT NULL,
    prod_categoria VARCHAR(30) NOT NULL,
    prod_estoque_atual INTEGER NOT NULL,
    prod_quantidade_minima INTEGER NOT NULL,
    prod_preco_anterior DECIMAL(10,2) NOT NULL,
    prod_preco_atual DECIMAL(10,2) NOT NULL,
    prod_preco_medio DECIMAL(10,2) NOT NULL,
    prod_data_cadastro DATE NOT NULL,
    prod_empenho VARCHAR(50) NOT NULL,
    prod_registro VARCHAR(40) NOT NULL,
    prod_lote VARCHAR(10) NOT NULL,
    prod_descricao TEXT NOT NULL,
    FOREIGN KEY (forn_id) REFERENCES fornecedor(forn_id_seq)
);

-- VENDAS 
CREATE TABLE IF NOT EXISTS venda (
    venda_id INTEGER PRIMARY KEY AUTOINCREMENT,
    cli_id INTEGER NOT NULL,
    func_id INTEGER, -- Funcionário que realizou a venda
    venda_data DATETIME DEFAULT CURRENT_TIMESTAMP,
    venda_total DECIMAL(10,2) NOT NULL,
    FOREIGN KEY (cli_id) REFERENCES clientes(cli_id),
    FOREIGN KEY (func_id) REFERENCES funcionario(func_id)
);

CREATE TABLE IF NOT EXISTS item_venda (
    item_id INTEGER PRIMARY KEY AUTOINCREMENT,
    venda_id INTEGER NOT NULL,
    prod_id_seq INTEGER NOT NULL,
    quantidade INTEGER NOT NULL,
    preco_unitario DECIMAL(10,2) NOT NULL,
    subtotal DECIMAL(10,2) NOT NULL,
    FOREIGN KEY (venda_id) REFERENCES venda(venda_id),
    FOREIGN KEY (prod_id_seq) REFERENCES produto(prod_id_seq)
);

-- COMPRAS 
CREATE TABLE IF NOT EXISTS compra (
    compra_id INTEGER PRIMARY KEY AUTOINCREMENT,
    forn_id INTEGER NOT NULL,
    func_id INTEGER, -- Funcionário que registrou a compra
    compra_data DATE DEFAULT CURRENT_DATE,
    compra_total DECIMAL(10,2) NOT NULL,
    FOREIGN KEY (forn_id) REFERENCES fornecedor(forn_id_seq),
    FOREIGN KEY (func_id) REFERENCES funcionario(func_id)
);

CREATE TABLE IF NOT EXISTS item_compra (
    item_compra_id INTEGER PRIMARY KEY AUTOINCREMENT,
    compra_id INTEGER NOT NULL,
    prod_id_seq INTEGER NOT NULL,
    quantidade INTEGER NOT NULL,
    preco_unitario DECIMAL(10,2) NOT NULL,
    subtotal DECIMAL(10,2) NOT NULL,
    FOREIGN KEY (compra_id) REFERENCES compra(compra_id),
    FOREIGN KEY (prod_id_seq) REFERENCES produto(prod_id_seq)
);

-- CONSULTA 
CREATE TABLE IF NOT EXISTS consulta (
    consulta_id INTEGER PRIMARY KEY AUTOINCREMENT,
    cli_id INTEGER NOT NULL,
    func_id INTEGER NOT NULL, -- Funcionário que realizou a consulta
    data_consulta DATETIME NOT NULL,
    tipo_consulta VARCHAR(50) NOT NULL, -- Ex: "Aferição de pressão", "Consulta farmacêutica"
    observacoes TEXT,
    FOREIGN KEY (cli_id) REFERENCES clientes(cli_id),
    FOREIGN KEY (func_id) REFERENCES funcionario(func_id)
);

-- ALERTAS DE ESTOQUE 
CREATE TABLE IF NOT EXISTS alerta_estoque (
    alerta_id INTEGER PRIMARY KEY AUTOINCREMENT,
    prod_id_seq INTEGER NOT NULL,
    data_alerta DATETIME DEFAULT CURRENT_TIMESTAMP,
    estoque_atual INTEGER NOT NULL,
    quantidade_minima INTEGER NOT NULL,
    mensagem TEXT NOT NULL,
    resolvido BOOLEAN DEFAULT 0, -- CORRIGIDO: colocado na criação da tabela
    FOREIGN KEY (prod_id_seq) REFERENCES produto(prod_id_seq)
);

-- TABELA DE RECEITAS 
CREATE TABLE IF NOT EXISTS receita (
    receita_id INTEGER PRIMARY KEY AUTOINCREMENT,
    cli_id INTEGER NOT NULL,
    func_id INTEGER NOT NULL, -- farmacêutico que registrou a receita
    receita_data DATE NOT NULL,
    receita_valida_ate DATE NOT NULL,
    descricao TEXT NOT NULL,
    FOREIGN KEY (cli_id) REFERENCES clientes(cli_id),
    FOREIGN KEY (func_id) REFERENCES funcionario(func_id)
);

CREATE TABLE IF NOT EXISTS item_receita (
    item_receita_id INTEGER PRIMARY KEY AUTOINCREMENT,
    receita_id INTEGER NOT NULL,
    prod_id_seq INTEGER NOT NULL,
    quantidade INTEGER NOT NULL,
    FOREIGN KEY (receita_id) REFERENCES receita(receita_id),
    FOREIGN KEY (prod_id_seq) REFERENCES produto(prod_id_seq)
);

-- REGISTRO DE LOG DE MOVIMENTACAO DO ESTOQUE 
CREATE TABLE IF NOT EXISTS estoque_movimentacao (
    mov_id INTEGER PRIMARY KEY AUTOINCREMENT,
    prod_id_seq INTEGER NOT NULL,
    tipo_movimentacao VARCHAR(10) NOT NULL, -- 'entrada' ou 'saida'
    quantidade INTEGER NOT NULL,
    data_movimentacao DATETIME DEFAULT CURRENT_TIMESTAMP,
    origem VARCHAR(50), -- ex: 'compra', 'venda', 'ajuste manual'
    func_id INTEGER, -- funcionário responsável pela movimentação
    FOREIGN KEY (prod_id_seq) REFERENCES produto(prod_id_seq),
    FOREIGN KEY (func_id) REFERENCES funcionario(func_id)
);

-- Inserção de dados

-- FORNECEDORES
INSERT INTO fornecedor(
    forn_nome_empresa,
    forn_cnpj,
    forn_email,
    forn_contato_nome,
    forn_contato_cargo,
    forn_contato_telefone,
    forn_contato_email
) VALUES 
('FarmaDistrib SA', '12.345.678/0001-90', 'vendas@farmadist.com', 'João Silva', 'Gerente Vendas', '11987654322', 'joao@farmadist.com'),
('MediSupply Ltd', '23.456.789/0001-01', 'contato@medisup.br', 'Maria Santos', 'Diretora Comercial', '21876543211', 'maria@medisup.br'),
('PharmaMax Dis', '34.567.890/0001-12', 'vendas@pharmamax.com', 'Pedro Costa', 'Consultor Farmac', '85765432110', 'pedro@pharmamax.com'),
('BioMed Brasil', '45.678.901/0001-23', 'info@biomedbr.br', 'Ana Oliveira', 'Farmacêutica', '41654321099', 'ana@biomedbr.br'),
('Drogacentral', '56.789.012/0001-34', 'comercial@drogacent.br', 'Carlos Lima', 'Representante', '31543210988', 'carlos@drogacent.br');

-- CLIENTES
INSERT INTO clientes (cli_nome, cli_cpf, cli_email) VALUES
('Ana Maria Silva', '123.456.789-01', 'ana.silva@email.com'),
('João Pedro Santos', '234.567.890-12', 'joao.santos@email.com'),
('Maria Fernanda Costa', '345.678.901-23', 'maria.costa@email.com'),
('Carlos Eduardo Lima', '456.789.012-34', 'carlos.lima@email.com'),
('Fernanda Oliveira', '567.890.123-45', 'fernanda.oliveira@email.com'),
('Roberto Silva Junior', '678.901.234-56', 'roberto.junior@email.com'),
('Patrícia Mendes', '789.012.345-67', 'patricia.mendes@email.com'),
('Rafael Almeida', '890.123.456-78', 'rafael.almeida@email.com');

-- FUNCIONÁRIOS
INSERT INTO funcionario (func_nome, func_cpf, func_email, func_cargo, func_salario) VALUES
('Dr. Lucas Ferreira', '111.222.333-44', 'lucas.ferreira@farmacia.com', 'Farmacêutico Responsável', 8500.00),
('Juliana Rodrigues', '222.333.444-55', 'juliana.rodrigues@farmacia.com', 'Balconista Senior', 3200.00),
('Bruno Machado', '333.444.555-66', 'bruno.machado@farmacia.com', 'Auxiliar de Farmácia', 2800.00),
('Camila Souza', '444.555.666-77', 'camila.souza@farmacia.com', 'Caixa', 2400.00),
('Diego Martins', '555.666.777-88', 'diego.martins@farmacia.com', 'Atendente', 2200.00),
('Dra. Larissa Pereira', '666.777.888-99', 'larissa.pereira@farmacia.com', 'Farmacêutica', 7500.00);

-- ENDEREÇOS (para clientes e funcionários)
INSERT INTO endereco (cli_id, func_id, end_cep, end_logradouro, end_numero, end_complemento, end_bairro, end_cidade, end_estado) VALUES
(1, NULL, '01310-100', 'Rua das Flores', '123', 'Apto 45', 'Vila Madalena', 'São Paulo', 'SP'),
(2, NULL, '20040-020', 'Av. Copacabana', '456', 'Cobertura', 'Copacabana', 'Rio de Janeiro', 'RJ'),
(3, NULL, '30112-000', 'Rua Savassi', '789', 'Casa', 'Savassi', 'Belo Horizonte', 'MG'),
(4, NULL, '80420-090', 'Av. Batel', '321', 'Sala 10', 'Batel', 'Curitiba', 'PR'),
(5, NULL, '60160-230', 'Rua Aldeota', '654', 'Apto 20', 'Aldeota', 'Fortaleza', 'CE'),
(NULL, 1, '04567-890', 'Rua Ibirapuera', '100', 'Casa 2', 'Ibirapuera', 'São Paulo', 'SP'),
(NULL, 2, '01234-567', 'Av. Faria Lima', '200', 'Apto 15', 'Itaim Bibi', 'São Paulo', 'SP'),
(NULL, 3, '05678-901', 'Rua Vila Olímpia', '300', 'Conj 5', 'Vila Olímpia', 'São Paulo', 'SP');

-- TELEFONES (para clientes)
INSERT INTO telefone (cli_id, tel_numero) VALUES
(1, '11987654321'),
(1, '1134567890'),
(2, '21876543210'),
(3, '31765432109'),
(3, '31987654321'),
(4, '41654321098'),
(5, '85543210987'),
(6, '11432109876'),
(7, '11321098765'),
(8, '21210987654');

-- TELEFONES (para funcionario)
INSERT INTO telefone_funcionario (func_id, tel_numero) VALUES
(1, '12345678901'),
(1, '09876543210'),
(2, '57420138329'),
(3, '89566974348'),
(3, '32144858547'),
(4, '85652365896'),
(5, '98765432345'),
(6, '67443576459');

-- TELEFONES (para fornecedor) - CORRIGIDO: ajustado para coincidir com IDs existentes
INSERT INTO telefone_fornecedor (forn_id, tel_numero) VALUES
(1, '74593248598'),
(1, '23145558558'),
(2, '97441235588'),
(3, '78931126525'),
(3, '12536985656'),
(4, '36147982522'),
(5, '25147888554');

-- PRODUTOS - CORRIGIDO: formato dos campos
INSERT INTO produto (
    forn_id,
    prod_nome,
    prod_codigo_barra,
    prod_categoria,
    prod_estoque_atual,
    prod_quantidade_minima,
    prod_preco_anterior,
    prod_preco_atual,
    prod_preco_medio,
    prod_data_cadastro,
    prod_empenho,
    prod_registro,
    prod_lote,
    prod_descricao
) VALUES
(1, 'Paracetamol 500mg', '7891234567890', 'Analgésico', 50, 10, 8.90, 7.50, 8.20, '2024-01-15', 'EMP001', 'REG001', 'LOTE001', 'Paracetamol 500mg - Analgésico e antipirético - Caixa com 20 comprimidos'),
(1, 'Dipirona 500mg', '7891234567891', 'Analgésico', 30, 8, 12.90, 11.50, 12.20, '2024-01-20', 'EMP002', 'REG002', 'LOTE002', 'Dipirona Sódica 500mg - Analgésico e antitérmico - Caixa com 10 comprimidos'),
(2, 'Omeprazol 20mg', '7891234567892', 'Protetor Gástrico', 25, 5, 15.90, 14.20, 15.05, '2024-02-01', 'EMP003', 'REG003', 'LOTE003', 'Omeprazol 20mg - Protetor gástrico - Caixa com 28 cápsulas'),
(2, 'Losartana 50mg', '7891234567893', 'Anti-hipertensivo', 40, 10, 18.90, 16.80, 17.85, '2024-02-10', 'EMP004', 'REG004', 'LOTE004', 'Losartana Potássica 50mg - Anti-hipertensivo - Caixa com 30 comprimidos'),
(3, 'Vitamina C 1g', '7891234567894', 'Vitamina', 20, 5, 25.90, 23.50, 24.70, '2024-02-15', 'EMP005', 'REG005', 'LOTE005', 'Vitamina C 1g - Suplemento vitamínico - Frasco com 30 comprimidos efervescentes'),
(3, 'Dorflex', '7891234567895', 'Relaxante Muscular', 35, 8, 22.90, 20.50, 21.70, '2024-03-01', 'EMP006', 'REG006', 'LOTE006', 'Dorflex - Relaxante muscular - Caixa com 20 comprimidos'),
(4, 'Soro Fisiológico 250ml', '7891234567896', 'Solução', 60, 20, 4.90, 4.20, 4.55, '2024-03-10', 'EMP007', 'REG007', 'LOTE007', 'Soro Fisiológico 0,9% - 250ml - Uso nasal e ocular'),
(4, 'Álcool 70% - 1L', '7891234567897', 'Antisséptico', 45, 15, 12.90, 11.90, 12.40, '2024-03-15', 'EMP008', 'REG008', 'LOTE008', 'Álcool Etílico Hidratado 70% - Antisséptico - Frasco 1 litro'),
(5, 'Ibuprofeno 600mg', '7891234567898', 'Anti-inflamatório', 30, 8, 16.90, 15.20, 16.05, '2024-04-01', 'EMP009', 'REG009', 'LOTE009', 'Ibuprofeno 600mg - Anti-inflamatório - Caixa com 10 comprimidos'),
(5, 'Termômetro Digital', '7891234567899', 'Equipamento', 15, 3, 35.90, 32.50, 34.20, '2024-04-10', 'EMP010', 'REG010', 'LOTE010', 'Termômetro Digital - Medição em 60 segundos - À prova d água');

-- TRIGGERS

-- TRIGGER PARA BAIXAR O ESTOQUE APOS UMA VENDA 
CREATE TRIGGER IF NOT EXISTS trg_baixar_estoque_venda
AFTER INSERT ON item_venda
BEGIN
    UPDATE produto
    SET prod_estoque_atual = prod_estoque_atual - NEW.quantidade
    WHERE prod_id_seq = NEW.prod_id_seq;
END;

-- TRIGGER (GATILHO) PARA AUMENTAR O ESTOQUE APOS UMA COMPRA 
CREATE TRIGGER IF NOT EXISTS trg_repor_estoque_compra
AFTER INSERT ON item_compra
BEGIN
    UPDATE produto
    SET prod_estoque_atual = prod_estoque_atual + NEW.quantidade
    WHERE prod_id_seq = NEW.prod_id_seq;
END;

-- ALERTA DE ESTOQUE BAIXO 
CREATE TRIGGER IF NOT EXISTS trg_alerta_estoque_baixo
AFTER UPDATE ON produto
WHEN NEW.prod_estoque_atual < NEW.prod_quantidade_minima
BEGIN
    INSERT INTO alerta_estoque (
        prod_id_seq,
        estoque_atual,
        quantidade_minima,
        mensagem
    ) VALUES (
        NEW.prod_id_seq,
        NEW.prod_estoque_atual,
        NEW.prod_quantidade_minima,
        'Estoque abaixo do nível mínimo!'
    );
END;

-- TRIGGERS PARA ALIMENTAR AUTOMATICAMENTE O LOG 

-- Ao inserir item_venda (saída)
CREATE TRIGGER IF NOT EXISTS trg_log_saida_estoque
AFTER INSERT ON item_venda
BEGIN
    INSERT INTO estoque_movimentacao(prod_id_seq, tipo_movimentacao, quantidade, origem, func_id)
    VALUES (NEW.prod_id_seq, 'saida', NEW.quantidade, 'venda', (SELECT func_id FROM venda WHERE venda_id = NEW.venda_id));
END;

-- Ao inserir item_compra (entrada)
CREATE TRIGGER IF NOT EXISTS trg_log_entrada_estoque
AFTER INSERT ON item_compra
BEGIN
    INSERT INTO estoque_movimentacao(prod_id_seq, tipo_movimentacao, quantidade, origem, func_id)
    VALUES (NEW.prod_id_seq, 'entrada', NEW.quantidade, 'compra', (SELECT func_id FROM compra WHERE compra_id = NEW.compra_id));
END;

-- VIEWS / RELATORIOS PARA ANALISE 

-- VIEW PARA VER PRODUTOS COM ESTOQUE ABAIXO DO MINIMO 
CREATE VIEW IF NOT EXISTS vw_produtos_baixo_estoque AS
SELECT 
    p.prod_id_seq,
    p.prod_nome,
    p.prod_estoque_atual,
    p.prod_quantidade_minima,
    f.forn_nome_empresa
FROM produto p
JOIN fornecedor f ON f.forn_id_seq = p.forn_id
WHERE p.prod_estoque_atual < p.prod_quantidade_minima;

-- Produtos mais vendidos
CREATE VIEW IF NOT EXISTS vw_produtos_mais_vendidos AS
SELECT
    p.prod_id_seq,
    p.prod_nome,
    SUM(iv.quantidade) AS total_vendido
FROM item_venda iv
JOIN produto p ON p.prod_id_seq = iv.prod_id_seq
GROUP BY p.prod_id_seq, p.prod_nome
ORDER BY total_vendido DESC;

-- Funcionários com maior valor de vendas
CREATE VIEW IF NOT EXISTS vw_funcionarios_mais_vendas AS
SELECT
    f.func_id,
    f.func_nome,
    COUNT(v.venda_id) AS total_vendas,
    SUM(v.venda_total) AS valor_total_vendido
FROM venda v
JOIN funcionario f ON f.func_id = v.func_id
GROUP BY f.func_id, f.func_nome
ORDER BY valor_total_vendido DESC;

-- Compras por fornecedor
CREATE VIEW vw_compras_por_fornecedor AS  -- Renomeado para um nome válido
SELECT f.forn_id_seq, f.forn_nome_empresa, SUM(c.compra_total) AS total_compras
FROM fornecedor f
JOIN compra c ON f.forn_id_seq = c.forn_id
GROUP BY f.forn_id_seq, f.forn_nome_empresa;
